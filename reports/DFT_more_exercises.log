Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# This will time your function for a set of lengths. You need to run this, plot the data that comes out and
# examine the resulting curve. Does it follow a y = a * x**2 + b * x + c curve?

# WARNING: These data sets are longer than 256 samples. Make sure your Fourier transform function can handle that! 
data_time_domain_CASE_3 = np.random.normal(size=256)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
data_time_domain_CASE_3 = np.random.normal(size=256*2)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
data_time_domain_CASE_3 = np.random.normal(size=256*3)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
data_time_domain_CASE_3 = np.random.normal(size=256*4)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
data_time_domain_CASE_3 = np.random.normal(size=256*5)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
data_time_domain_CASE_3 = np.random.normal(size=256*6)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
data_time_domain_CASE_3 = np.random.normal(size=256*7)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
data_time_domain_CASE_3 = np.random.normal(size=256*8)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
data_time_domain_CASE_3 = np.random.normal(size=256*9)
%timeit -n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [5][0m, in [0;36m<module>[0;34m[0m
[1;32m      1[0m [38;5;66;03m# This will time your function for a set of lengths. You need to run this, plot the data that comes out and[39;00m
[1;32m      2[0m [38;5;66;03m# examine the resulting curve. Does it follow a y = a * x**2 + b * x + c curve?[39;00m
[1;32m      3[0m 
[1;32m      4[0m [38;5;66;03m# WARNING: These data sets are longer than 256 samples. Make sure your Fourier transform function can handle that! [39;00m
[1;32m      5[0m data_time_domain_CASE_3 [38;5;241m=[39m np[38;5;241m.[39mrandom[38;5;241m.[39mnormal(size[38;5;241m=[39m[38;5;241m256[39m)
[0;32m----> 6[0m [43mget_ipython[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mrun_line_magic[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mtimeit[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43m-n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m      7[0m data_time_domain_CASE_3 [38;5;241m=[39m np[38;5;241m.[39mrandom[38;5;241m.[39mnormal(size[38;5;241m=[39m[38;5;241m256[39m[38;5;241m*[39m[38;5;241m2[39m)
[1;32m      8[0m get_ipython()[38;5;241m.[39mrun_line_magic([38;5;124m'[39m[38;5;124mtimeit[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124m-n 2 -r 2 compute_fourier_transform(data_time_domain_CASE_3)[39m[38;5;124m'[39m)

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/IPython/core/interactiveshell.py:2204[0m, in [0;36mInteractiveShell.run_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2202[0m     kwargs[[38;5;124m'[39m[38;5;124mlocal_ns[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mget_local_scope(stack_depth)
[1;32m   2203[0m [38;5;28;01mwith[39;00m [38;5;28mself[39m[38;5;241m.[39mbuiltin_trap:
[0;32m-> 2204[0m     result [38;5;241m=[39m [43mfn[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m   2205[0m [38;5;28;01mreturn[39;00m result

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/IPython/core/magics/execution.py:1166[0m, in [0;36mExecutionMagics.timeit[0;34m(self, line, cell, local_ns)[0m
[1;32m   1163[0m         [38;5;28;01mif[39;00m time_number [38;5;241m>[39m[38;5;241m=[39m [38;5;241m0.2[39m:
[1;32m   1164[0m             [38;5;28;01mbreak[39;00m
[0;32m-> 1166[0m all_runs [38;5;241m=[39m [43mtimer[49m[38;5;241;43m.[39;49m[43mrepeat[49m[43m([49m[43mrepeat[49m[43m,[49m[43m [49m[43mnumber[49m[43m)[49m
[1;32m   1167[0m best [38;5;241m=[39m [38;5;28mmin[39m(all_runs) [38;5;241m/[39m number
[1;32m   1168[0m worst [38;5;241m=[39m [38;5;28mmax[39m(all_runs) [38;5;241m/[39m number

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/timeit.py:205[0m, in [0;36mTimer.repeat[0;34m(self, repeat, number)[0m
[1;32m    203[0m r [38;5;241m=[39m []
[1;32m    204[0m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m(repeat):
[0;32m--> 205[0m     t [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mtimeit[49m[43m([49m[43mnumber[49m[43m)[49m
[1;32m    206[0m     r[38;5;241m.[39mappend(t)
[1;32m    207[0m [38;5;28;01mreturn[39;00m r

File [0;32m/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/IPython/core/magics/execution.py:156[0m, in [0;36mTimer.timeit[0;34m(self, number)[0m
[1;32m    154[0m gc[38;5;241m.[39mdisable()
[1;32m    155[0m [38;5;28;01mtry[39;00m:
[0;32m--> 156[0m     timing [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43minner[49m[43m([49m[43mit[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mtimer[49m[43m)[49m
[1;32m    157[0m [38;5;28;01mfinally[39;00m:
[1;32m    158[0m     [38;5;28;01mif[39;00m gcold:

File [0;32m<magic-timeit>:1[0m, in [0;36minner[0;34m(_it, _timer)[0m

Input [0;32mIn [2][0m, in [0;36mcompute_fourier_transform[0;34m(data_time_domain)[0m
[1;32m      1[0m [38;5;28;01mdef[39;00m [38;5;21mcompute_fourier_transform[39m(data_time_domain):
[1;32m      2[0m     [38;5;66;03m# FILL IN THE MISSING CODE[39;00m
[0;32m----> 3[0m     [38;5;28;01mreturn[39;00m [43mdata_frequency_domain[49m

[0;31mNameError[0m: name 'data_frequency_domain' is not defined
NameError: name 'data_frequency_domain' is not defined

