Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Here's how you would plot the Fourier transformed data. 
frequencies = np.arange(256) * (1./(data_length*sample_rate))
data_frequency_domain = compute_fourier_transform(data_time_domain)
plt.plot(frequencies, data_frequency_domain.real)
plt.plot(frequencies, data_frequency_domain.imag) # This is complex, so need two lines
plt.title('Fourier Transform')
plt.xlabel('Frequency (Hz)')
plt.ylabel('Amplitude')
plt.legend(['Real component','Imag component'])

# Make sure that the inverted data is equal to the original data!
plt.figure()
data_time_domain_inverted = compute_inverse_fourier_transform(data_frequency_domain)
plt.plot(times, data_time_domain_inverted.real, 'k-')
plt.plot(times, data_time_domain_inverted.imag, 'b-') # This is complex, so need two lines
plt.plot(times, data_time_domain, 'r:')
plt.title('Original data (hopefully)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.legend(['Real component','Imag component', 'Original data'])

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Input [0;32mIn [4][0m, in [0;36m<module>[0;34m[0m
[1;32m      1[0m [38;5;66;03m# Here's how you would plot the Fourier transformed data. [39;00m
[1;32m      2[0m frequencies [38;5;241m=[39m np[38;5;241m.[39marange([38;5;241m256[39m) [38;5;241m*[39m ([38;5;241m1.[39m[38;5;241m/[39m(data_length[38;5;241m*[39msample_rate))
[0;32m----> 3[0m data_frequency_domain [38;5;241m=[39m [43mcompute_fourier_transform[49m[43m([49m[43mdata_time_domain[49m[43m)[49m
[1;32m      4[0m plt[38;5;241m.[39mplot(frequencies, data_frequency_domain[38;5;241m.[39mreal)
[1;32m      5[0m plt[38;5;241m.[39mplot(frequencies, data_frequency_domain[38;5;241m.[39mimag) [38;5;66;03m# This is complex, so need two lines[39;00m

Input [0;32mIn [3][0m, in [0;36mcompute_fourier_transform[0;34m(data_time_domain)[0m
[1;32m      1[0m [38;5;28;01mdef[39;00m [38;5;21mcompute_fourier_transform[39m(data_time_domain):
[1;32m      2[0m     [38;5;66;03m# FILL IN THE MISSING CODE[39;00m
[0;32m----> 3[0m     [38;5;28;01mreturn[39;00m [43mdata_frequency_domain[49m

[0;31mNameError[0m: name 'data_frequency_domain' is not defined
NameError: name 'data_frequency_domain' is not defined

