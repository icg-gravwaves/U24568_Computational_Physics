Traceback (most recent call last):
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/homebrew/Caskroom/miniconda/base/envs/pycbc_test/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def txt_reader(file_name):
    file = open(file_name)
    lines = file.read().split("\n")
    result = [line.split(' ') for line in lines]
    # Result will be a list of lists. result[i] will refer to the ith row, result[i][j] will refer to the jth column
    # in the ith row.
    return result

txt_gen = txt_reader("stm.txt")
row_count = 0

for row in txt_gen:
    row_count += 1

# This uses a cool feature called fstrings. It lets us refer to specific variables, and print them, directly!
print(f"Row count is {row_count}")

# Note that the entire file is stored in memory, so we can do:
print (txt_gen[2][10])
# To quickly get a specific value

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mIndexError[0m                                Traceback (most recent call last)
Input [0;32mIn [10][0m, in [0;36m<module>[0;34m[0m
[1;32m     16[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mRow count is [39m[38;5;132;01m{[39;00mrow_count[38;5;132;01m}[39;00m[38;5;124m"[39m)
[1;32m     18[0m [38;5;66;03m# Note that the entire file is stored in memory, so we can do:[39;00m
[0;32m---> 19[0m [38;5;28mprint[39m ([43mtxt_gen[49m[43m[[49m[38;5;241;43m2[39;49m[43m][49m[43m[[49m[38;5;241;43m10[39;49m[43m][49m)

[0;31mIndexError[0m: list index out of range
IndexError: list index out of range

